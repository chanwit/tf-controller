# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: no-outputs
spec:
  namespace: terraform
  description: "This spec describes the behaviour of a Terraform resource with no backend, and `auto` approve."
  steps:
    - name: setup source
      try:
        - script:
            content: (cd ../data/terraform/hello-world-example && oras push localhost:5000/hello-world-example:latest .)
        - apply:
            resource:
              apiVersion: source.toolkit.fluxcd.io/v1beta2
              kind: OCIRepository
              metadata:
                name: hello-world-example
              spec:
                interval: 1m
                url: oci://kind-registry:5000/hello-world-example
                insecure: true
                ref:
                  tag: latest
    
    - name: apply terraform
      try:
        - apply:
            resource:
              apiVersion: infra.contrib.fluxcd.io/v1alpha2
              kind: Terraform
              metadata:
                name: no-outputs
              spec:
                approvePlan: auto
                path: ./
                sourceRef:
                  kind: OCIRepository
                  name: hello-world-example
                  namespace: terraform
                interval: 1m
        
    - name: assert plan conditions
      try:
        - assert:
            resource:
              apiVersion: v1
              kind: Secret
              metadata:
                name: tfplan-default-no-outputs
                annotations:
                  (contains(savedPlan, 'plan-latest-')): true
                  encoding: gzip
              data:
                (tfplan != null): true

        - assert:
            resource:
              apiVersion: infra.contrib.fluxcd.io/v1alpha2
              kind: Terraform
              metadata:
                name: no-outputs
              status:
                ~.(conditions[?type == 'Plan']):
                  reason: "TerraformPlannedWithChanges"
                  message: "Plan generated"

    - name: assert apply conditions
      try:
        - assert:
            resource:
              apiVersion: infra.contrib.fluxcd.io/v1alpha2
              kind: Terraform
              metadata:
                name: no-outputs
              status:
                ~.(conditions[?type == 'Apply']):
                  reason: "TerraformAppliedSucceed"
                  message: "Applied successfully"
                availableOutputs:
                  - hello_world
      finally:
        - delete:
            ref:
              apiVersion: v1
              kind: Secret
              name: tfstate-default-no-outputs
